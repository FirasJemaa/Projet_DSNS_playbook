########################################
# roles/dmz-web/tasks/cert.yml
########################################

- block:
    # 1) Générer clé et CSR sur DMZ-WEB
    - name: "[CERT] Créer le répertoire SSL"
      file:
        path: "{{ dmz_web_ssl_dir }}"
        state: directory
        mode: '0755'

    - name: "[CERT] Générer la clé privée"
      command: >
        openssl genrsa -out {{ dmz_web_ssl_dir }}/{{ dmz_web_key_filename }} 4096
      args:
        creates: "{{ dmz_web_ssl_dir }}/{{ dmz_web_key_filename }}"

    - name: "[CERT] Générer la CSR"
      command: >
        openssl req -new
        -key {{ dmz_web_ssl_dir }}/{{ dmz_web_key_filename }}
        -out {{ dmz_web_ssl_dir }}/{{ dmz_web_csr_filename }}
        -subj "/C={{ dmz_web_country }}/ST={{ dmz_web_state }}/O={{ dmz_web_org }}/OU={{ dmz_web_ou }}/CN={{ dmz_web_fqdn }}"
      args:
        creates: "{{ dmz_web_ssl_dir }}/{{ dmz_web_csr_filename }}"

    # 2) Créer le répertoire local de stockage sur le contrôleur
    - name: "[LOCAL] Créer le dossier files/dmz-web sur le contrôleur"
      local_action:
        module: file
        path: "files/dmz-web"
        state: directory
        mode: "0755"

    # 3) Récupérer la CSR vers le contrôleur
    - name: "[CERT] fetch la CSR -> Ansible controller"
      fetch:
        src: "{{ dmz_web_ssl_dir }}/{{ dmz_web_csr_filename }}"
        dest: "files/dmz-web/{{ dmz_web_csr_filename }}"
        flat: yes

    # 4) Initialisation PKI côté srv-pki
    - name: "[PKI] Vérifier si le fichier serial existe"
      stat:
        path: "{{ pki_dir }}/serial"
      register: serial_file
      delegate_to: "{{ srv_pki_host }}"
      become: yes

    - name: "[PKI] Initialiser serial à 01 si absent ou vide"
      copy:
        dest: "{{ pki_dir }}/serial"
        content: "01\n"
        mode: "0644"
      when: not (serial_file.stat.exists and serial_file.stat.size > 0)
      delegate_to: "{{ srv_pki_host }}"
      become: yes

    - name: "[PKI] Vérifier si index.txt existe"
      stat:
        path: "{{ pki_dir }}/index.txt"
      register: index_file
      delegate_to: "{{ srv_pki_host }}"
      become: yes

    - name: "[PKI] Créer index.txt vide si absent"
      copy:
        dest: "{{ pki_dir }}/index.txt"
        content: ""
        mode: "0644"
      when: not index_file.stat.exists
      delegate_to: "{{ srv_pki_host }}"
      become: yes

    - name: "[PKI] Vérifier si crlnumber existe"
      stat:
        path: "{{ pki_dir }}/crlnumber"
      register: crl_file
      delegate_to: "{{ srv_pki_host }}"
      become: yes

    - name: "[PKI] Initialiser crlnumber à 01 si absent ou vide"
      copy:
        dest: "{{ pki_dir }}/crlnumber"
        content: "01\n"
        mode: "0644"
      when: not (crl_file.stat.exists and crl_file.stat.size > 0)
      delegate_to: "{{ srv_pki_host }}"
      become: yes

    - name: "[PKI] Créer le dossier reqs/ sur SRV-PKI"
      file:
        path: "{{ pki_dir }}/reqs"
        state: directory
        mode: "0755"
      delegate_to: "{{ srv_pki_host }}"
      become: yes

    # 5) Copier la CSR depuis Ansible -> srv-pki
    - name: "[CERT] Copier la CSR de Ansible -> SRV-PKI"
      copy:
        src: "files/dmz-web/{{ dmz_web_csr_filename }}"
        dest: "{{ pki_dir }}/reqs/{{ dmz_web_csr_filename }}"
        mode: '0644'
      delegate_to: "{{ srv_pki_host }}"
      become: yes

    # 6) Signer la CSR
    - name: "[CERT] Signer la CSR sur SRV-PKI"
      command: >
        openssl ca
        -config {{ pki_openssl_conf }}
        -extensions v3_server
        -in {{ pki_dir }}/reqs/{{ dmz_web_csr_filename }}
        -out {{ pki_dir }}/certs/{{ dmz_web_crt_filename }}
        -batch
      args:
        creates: "{{ pki_dir }}/certs/{{ dmz_web_crt_filename }}"
      delegate_to: "{{ srv_pki_host }}"
      become: yes

    - name: "[PKI] Vérifier si le CRT généré existe"
      stat:
        path: "{{ pki_dir }}/certs/{{ dmz_web_crt_filename }}"
      register: crt_stat
      delegate_to: "{{ srv_pki_host }}"
      become: yes

    - name: "[CERT] Vérifier le certificat généré"
      command: "openssl x509 -in {{ pki_dir }}/certs/{{ dmz_web_crt_filename }} -noout -text"
      register: crt_info
      changed_when: false
      when: crt_stat.stat.exists
      delegate_to: "{{ srv_pki_host }}"
      become: yes

    - name: "DEBUG - Date d'expiration du CRT"
      debug:
        msg: "{{ crt_info.stdout | regex_search('Not After : (.+)') }}"
      delegate_to: localhost
      changed_when: false
      when: crt_stat.stat.exists

    # 7) Récupérer le CRT depuis srv-pki
    - name: "[CERT] fetch le CRT -> Ansible"
      fetch:
        src: "{{ pki_dir }}/certs/{{ dmz_web_crt_filename }}"
        dest: "files/dmz-web/{{ dmz_web_crt_filename }}"
        flat: yes
      when: crt_stat.stat.exists
      delegate_to: "{{ srv_pki_host }}"
      become: yes

    - name: "[CERT] fetch la CA -> Ansible"
      fetch:
        src: "{{ pki_dir }}/certs/ca.crt"
        dest: "files/dmz-web/ca.crt"
        flat: yes
      delegate_to: "{{ srv_pki_host }}"
      become: yes

    # 8) Déploiement sur DMZ-WEB
    - name: "[CERT] Copier le CRT signé sur DMZ-WEB"
      copy:
        src: "files/dmz-web/{{ dmz_web_crt_filename }}"
        dest: "{{ dmz_web_ssl_dir }}/{{ dmz_web_crt_filename }}"
        mode: '0644'

    - name: "[CERT] Copier la CA sur DMZ-WEB"
      copy:
        src: "files/dmz-web/ca.crt"
        dest: "{{ dmz_web_ssl_dir }}/{{ dmz_web_ca_filename }}"
        mode: '0644'

  rescue:
    - name: "Erreur dans la génération/signature du certificat"
      debug:
        msg: "Erreur attrapée : problème lors de la signature du certificat sur la PKI"
